// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime     @updatedAt @db.Timestamptz(0)
  user_name    String
  googleId     String       @unique
  messages     Message[]
  relator      Relation[]   @relation("relator")
  relatee      Relation[]   @relation("relatee")
  user_parties User_Party[]
  likes        Like[]
  upvotes      Upvote[]
  playlists    Playlist[]
  profile      String
}

model Relation {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now()) @db.Timestamptz(0)
  updatedAt  DateTime      @updatedAt @db.Timestamptz(0)
  relator    User          @relation("relator", fields: [relator_id], references: [id])
  relator_id String
  relatee    User          @relation("relatee", fields: [relatee_id], references: [id])
  relatee_id String
  type       Relation_Type
}

model Message {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @db.Timestamptz(0)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(0)
  room_timestamp String?
  message        String
  user           User         @relation(fields: [user_id], references: [id])
  user_id        String
  party          Party        @relation(fields: [party_id], references: [id])
  party_id       String
  type           Message_Type
  upvotes_count  Int          @default(0)
  upvotes        Upvote[]
}

model Party {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(0)
  name          String?
  description   String?
  messages      Message[]
  is_private    Boolean       @default(false)
  will_archive  Boolean       @default(false)
  start_date    DateTime      @default(now()) @db.Timestamptz(0)
  // TODO: remove likes_count property
  likes_count   Int           @default(0)
  type          Party_Type
  status        Status        @default(UPCOMING)
  user_parties  User_Party[]
  likes         Like[]
  party_videos  Party_Video[]
  thumbnail     String?
  current_video Int?          @default(0)
  current_time  Decimal?      @default(0.0001)
}

model Playlist {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(0)
  name            String
  description     String
  thumbnail       String
  playlist_videos Playlist_Video[]
  user            User?            @relation(fields: [user_id], references: [id])
  user_id         String?
}

model Video {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(0)
  url             String
  title           String
  description     String
  thumbnail       String
  playlist_videos Playlist_Video[]
  party_videos    Party_Video[]
}

model Like {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt DateTime  @updatedAt @db.Timestamptz(0)
  user_id   String
  user      User      @relation(fields: [user_id], references: [id])
  party_id  String
  party     Party     @relation(fields: [party_id], references: [id])
  type      Like_Type
}

model Upvote {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @db.Timestamptz(0)
  updatedAt  DateTime @updatedAt @db.Timestamptz(0)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  message_id String
  message    Message  @relation(fields: [message_id], references: [id])
}

model User_Party {
  id       String @id @default(uuid())
  user_id  String
  party_id String
  role     Role   @default(NORMIE)
  user     User   @relation(fields: [user_id], references: [id])
  party    Party  @relation(fields: [party_id], references: [id])
}

model Playlist_Video {
  id          String   @id @default(uuid())
  index       Int
  playlist_id String
  video_id    String
  playlist    Playlist @relation(fields: [playlist_id], references: [id])
  video       Video    @relation(fields: [video_id], references: [id])
}

model Party_Video {
  id       String @id @default(uuid())
  index    Int
  party_id String
  video_id String
  party    Party  @relation(fields: [party_id], references: [id])
  video    Video  @relation(fields: [video_id], references: [id])
}

enum Party_Type {
  DM
  PARTY
}

enum Status {
  ARCHIVED
  UPCOMING
  LIVE
}

enum Role {
  CREATOR
  ADMIN
  NORMIE
}

enum Message_Type {
  DM
  COMMENT
}

enum Relation_Type {
  BLOCK
  FOLLOW
}

enum Like_Type {
  LIKE
  DISLIKE
}
